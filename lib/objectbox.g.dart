// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/driver.dart';
import 'models/trip.dart';
import 'models/trip_location.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6912504348649240809),
      name: 'Driver',
      lastPropertyId: const obx_int.IdUid(3, 8297823567899394019),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5375092990666349265),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5605056955698089737),
            name: 'isAuthorized',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8297823567899394019),
            name: 'privateTrips',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 7730691983047863070),
            name: 'trips',
            targetId: const obx_int.IdUid(5, 1832358271218994760))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 1832358271218994760),
      name: 'Trip',
      lastPropertyId: const obx_int.IdUid(13, 6020576199144619562),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4737431852131480680),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8087349748054237338),
            name: 'startLocationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 1618193787246806027),
            relationTarget: 'TripLocation'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5385960739147473959),
            name: 'endLocationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 1724532676930884542),
            relationTarget: 'TripLocation'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 795573068566224104),
            name: 'startMileage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2196072175871417321),
            name: 'endMileage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 150701777894560759),
            name: 'vin',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5943347980171961364),
            name: 'endTimestamp',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1104393838953814765),
            name: 'startTimestamp',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7702087421946930035),
            name: 'currentMileage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3868884046055870958),
            name: 'tripCategory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6020576199144619562),
            name: 'tripStatus',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 7146167246693813417),
      name: 'TripLocation',
      lastPropertyId: const obx_int.IdUid(4, 4760103922227303277),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6026804955087671822),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1559457446283192550),
            name: 'street',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4400260653195643072),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4760103922227303277),
            name: 'postalCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(8, 7146167246693813417),
      lastIndexId: const obx_int.IdUid(5, 7323061810190391864),
      lastRelationId: const obx_int.IdUid(1, 7730691983047863070),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        3917395289137033145,
        522391902727584447,
        800457783229245686,
        2191456460352204353,
        4749663025170053776
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5169966380460749462,
        1063782334860157701,
        5538011044127542787,
        2608101225926435352,
        2136026444521046762,
        417434690863460070,
        8682506618904700378,
        2030316889418012582,
        1017530267524238925,
        8738200652028959083,
        2488691493552574405,
        1637808822089107047,
        2927733738437424194,
        1125954922849964380
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Driver: obx_int.EntityDefinition<Driver>(
        model: _entities[0],
        toOneRelations: (Driver object) => [],
        toManyRelations: (Driver object) =>
            {obx_int.RelInfo<Driver>.toMany(1, object.id): object.trips},
        getId: (Driver object) => object.id,
        setId: (Driver object, int id) {
          object.id = id;
        },
        objectToFB: (Driver object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isAuthorized);
          fbb.addBool(2, object.privateTrips);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Driver()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..isAuthorized =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false)
            ..privateTrips =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          obx_int.InternalToManyAccess.setRelInfo<Driver>(object.trips, store,
              obx_int.RelInfo<Driver>.toMany(1, object.id));
          return object;
        }),
    Trip: obx_int.EntityDefinition<Trip>(
        model: _entities[1],
        toOneRelations: (Trip object) =>
            [object.startLocation, object.endLocation],
        toManyRelations: (Trip object) => {},
        getId: (Trip object) => object.id,
        setId: (Trip object, int id) {
          object.id = id;
        },
        objectToFB: (Trip object, fb.Builder fbb) {
          final vinOffset = fbb.writeString(object.vin);
          final endTimestampOffset = object.endTimestamp == null
              ? null
              : fbb.writeString(object.endTimestamp!);
          final startTimestampOffset = fbb.writeString(object.startTimestamp);
          final tripCategoryOffset = fbb.writeString(object.tripCategory);
          final tripStatusOffset = fbb.writeString(object.tripStatus);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.startLocation.targetId);
          fbb.addInt64(2, object.endLocation.targetId);
          fbb.addInt64(3, object.startMileage);
          fbb.addInt64(4, object.endMileage);
          fbb.addOffset(5, vinOffset);
          fbb.addOffset(6, endTimestampOffset);
          fbb.addOffset(9, startTimestampOffset);
          fbb.addInt64(10, object.currentMileage);
          fbb.addOffset(11, tripCategoryOffset);
          fbb.addOffset(12, tripStatusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startLocationParam = obx.ToOne<TripLocation>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final endLocationParam = obx.ToOne<TripLocation>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final startMileageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final vinParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final startTimestampParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final endTimestampParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final endMileageParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final currentMileageParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final tripStatusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final tripCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final object = Trip(
              startLocation: startLocationParam,
              endLocation: endLocationParam,
              startMileage: startMileageParam,
              vin: vinParam,
              startTimestamp: startTimestampParam,
              endTimestamp: endTimestampParam,
              endMileage: endMileageParam,
              currentMileage: currentMileageParam,
              tripStatus: tripStatusParam,
              tripCategory: tripCategoryParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.startLocation.attach(store);
          object.endLocation.attach(store);
          return object;
        }),
    TripLocation: obx_int.EntityDefinition<TripLocation>(
        model: _entities[2],
        toOneRelations: (TripLocation object) => [],
        toManyRelations: (TripLocation object) => {},
        getId: (TripLocation object) => object.id,
        setId: (TripLocation object, int id) {
          object.id = id;
        },
        objectToFB: (TripLocation object, fb.Builder fbb) {
          final streetOffset = fbb.writeString(object.street);
          final cityOffset = fbb.writeString(object.city);
          final postalCodeOffset = fbb.writeString(object.postalCode);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, streetOffset);
          fbb.addOffset(2, cityOffset);
          fbb.addOffset(3, postalCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final streetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final postalCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = TripLocation(
              street: streetParam, city: cityParam, postalCode: postalCodeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Driver] entity fields to define ObjectBox queries.
class Driver_ {
  /// See [Driver.id].
  static final id =
      obx.QueryIntegerProperty<Driver>(_entities[0].properties[0]);

  /// See [Driver.isAuthorized].
  static final isAuthorized =
      obx.QueryBooleanProperty<Driver>(_entities[0].properties[1]);

  /// See [Driver.privateTrips].
  static final privateTrips =
      obx.QueryBooleanProperty<Driver>(_entities[0].properties[2]);

  /// see [Driver.trips]
  static final trips =
      obx.QueryRelationToMany<Driver, Trip>(_entities[0].relations[0]);
}

/// [Trip] entity fields to define ObjectBox queries.
class Trip_ {
  /// See [Trip.id].
  static final id = obx.QueryIntegerProperty<Trip>(_entities[1].properties[0]);

  /// See [Trip.startLocation].
  static final startLocation =
      obx.QueryRelationToOne<Trip, TripLocation>(_entities[1].properties[1]);

  /// See [Trip.endLocation].
  static final endLocation =
      obx.QueryRelationToOne<Trip, TripLocation>(_entities[1].properties[2]);

  /// See [Trip.startMileage].
  static final startMileage =
      obx.QueryIntegerProperty<Trip>(_entities[1].properties[3]);

  /// See [Trip.endMileage].
  static final endMileage =
      obx.QueryIntegerProperty<Trip>(_entities[1].properties[4]);

  /// See [Trip.vin].
  static final vin = obx.QueryStringProperty<Trip>(_entities[1].properties[5]);

  /// See [Trip.endTimestamp].
  static final endTimestamp =
      obx.QueryStringProperty<Trip>(_entities[1].properties[6]);

  /// See [Trip.startTimestamp].
  static final startTimestamp =
      obx.QueryStringProperty<Trip>(_entities[1].properties[7]);

  /// See [Trip.currentMileage].
  static final currentMileage =
      obx.QueryIntegerProperty<Trip>(_entities[1].properties[8]);

  /// See [Trip.tripCategory].
  static final tripCategory =
      obx.QueryStringProperty<Trip>(_entities[1].properties[9]);

  /// See [Trip.tripStatus].
  static final tripStatus =
      obx.QueryStringProperty<Trip>(_entities[1].properties[10]);
}

/// [TripLocation] entity fields to define ObjectBox queries.
class TripLocation_ {
  /// See [TripLocation.id].
  static final id =
      obx.QueryIntegerProperty<TripLocation>(_entities[2].properties[0]);

  /// See [TripLocation.street].
  static final street =
      obx.QueryStringProperty<TripLocation>(_entities[2].properties[1]);

  /// See [TripLocation.city].
  static final city =
      obx.QueryStringProperty<TripLocation>(_entities[2].properties[2]);

  /// See [TripLocation.postalCode].
  static final postalCode =
      obx.QueryStringProperty<TripLocation>(_entities[2].properties[3]);
}
