// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'models/driver.dart';
import 'models/gps.dart';
import 'models/location.dart';
import 'models/telemetry.dart';
import 'models/trip.dart';
import 'models/trip_information.dart';
import 'models/vehicle_diagnostics.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8291371537758625746),
      name: 'Driver',
      lastPropertyId: const obx_int.IdUid(3, 7058414077217498616),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2285555592967583279),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 247790464164907438),
            name: 'isAuthorized',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7058414077217498616),
            name: 'privateTrips',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 8053518692451467066),
            name: 'trips',
            targetId: const obx_int.IdUid(5, 7576480547456164306))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5901901481565787140),
      name: 'Gps',
      lastPropertyId: const obx_int.IdUid(1, 6433781710868316699),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6433781710868316699),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1008795260177827012),
      name: 'Location',
      lastPropertyId: const obx_int.IdUid(4, 3696501081838497006),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6313985022766044163),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1239293121620796112),
            name: 'street',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8868612911150543510),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3696501081838497006),
            name: 'postalCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4623885551922969092),
      name: 'Telemetry',
      lastPropertyId: const obx_int.IdUid(3, 4008279420136613746),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2421463508963451349),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7515293752943471500),
            name: 'gpsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 5812603054223812936),
            relationTarget: 'Gps'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4008279420136613746),
            name: 'vehicleDiagnosticsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7291338709312035993),
            relationTarget: 'VehicleDiagnostics')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 7576480547456164306),
      name: 'Trip',
      lastPropertyId: const obx_int.IdUid(9, 50545977446855383),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7225924636543553046),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8711551546510538148),
            name: 'tripInformationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 2381262226011791789),
            relationTarget: 'TripInformation'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4138140637291787770),
            name: 'startLocationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 4690736537365864121),
            relationTarget: 'Location'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2491982752079094549),
            name: 'endLocationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 8860028433054077956),
            relationTarget: 'Location'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6219580597257460309),
            name: 'startMileage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6013629179958562458),
            name: 'endMileage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8920345630354971422),
            name: 'telemetryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 2758830007158379056),
            relationTarget: 'Telemetry'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 350530437595885314),
            name: 'tripCategory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 50545977446855383),
            name: 'tripStatus',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 1249598320733653736),
      name: 'TripInformation',
      lastPropertyId: const obx_int.IdUid(1, 7004838042793205157),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7004838042793205157),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 8410898522382471687),
      name: 'VehicleDiagnostics',
      lastPropertyId: const obx_int.IdUid(3, 6580901697177358760),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5745589683350580440),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2190900124390503031),
            name: 'vin',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(7, 3366582673893933565)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6580901697177358760),
            name: 'currentMileage',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 8410898522382471687),
      lastIndexId: const obx_int.IdUid(7, 3366582673893933565),
      lastRelationId: const obx_int.IdUid(1, 8053518692451467066),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Driver: obx_int.EntityDefinition<Driver>(
        model: _entities[0],
        toOneRelations: (Driver object) => [],
        toManyRelations: (Driver object) =>
            {obx_int.RelInfo<Driver>.toMany(1, object.id): object.trips},
        getId: (Driver object) => object.id,
        setId: (Driver object, int id) {
          object.id = id;
        },
        objectToFB: (Driver object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isAuthorized);
          fbb.addBool(2, object.privateTrips);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Driver()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..isAuthorized =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false)
            ..privateTrips =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          obx_int.InternalToManyAccess.setRelInfo<Driver>(object.trips, store,
              obx_int.RelInfo<Driver>.toMany(1, object.id));
          return object;
        }),
    Gps: obx_int.EntityDefinition<Gps>(
        model: _entities[1],
        toOneRelations: (Gps object) => [],
        toManyRelations: (Gps object) => {},
        getId: (Gps object) => object.id,
        setId: (Gps object, int id) {
          object.id = id;
        },
        objectToFB: (Gps object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Gps()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Location: obx_int.EntityDefinition<Location>(
        model: _entities[2],
        toOneRelations: (Location object) => [],
        toManyRelations: (Location object) => {},
        getId: (Location object) => object.id,
        setId: (Location object, int id) {
          object.id = id;
        },
        objectToFB: (Location object, fb.Builder fbb) {
          final streetOffset = fbb.writeString(object.street);
          final cityOffset = fbb.writeString(object.city);
          final postalCodeOffset = fbb.writeString(object.postalCode);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, streetOffset);
          fbb.addOffset(2, cityOffset);
          fbb.addOffset(3, postalCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final streetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final postalCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Location(
              street: streetParam, city: cityParam, postalCode: postalCodeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Telemetry: obx_int.EntityDefinition<Telemetry>(
        model: _entities[3],
        toOneRelations: (Telemetry object) =>
            [object.gps, object.vehicleDiagnostics],
        toManyRelations: (Telemetry object) => {},
        getId: (Telemetry object) => object.id,
        setId: (Telemetry object, int id) {
          object.id = id;
        },
        objectToFB: (Telemetry object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.gps.targetId);
          fbb.addInt64(2, object.vehicleDiagnostics.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final gpsParam = obx.ToOne<Gps>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final vehicleDiagnosticsParam = obx.ToOne<VehicleDiagnostics>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Telemetry(
              gps: gpsParam,
              vehicleDiagnostics: vehicleDiagnosticsParam,
              id: idParam);
          object.gps.attach(store);
          object.vehicleDiagnostics.attach(store);
          return object;
        }),
    Trip: obx_int.EntityDefinition<Trip>(
        model: _entities[4],
        toOneRelations: (Trip object) => [
              object.tripInformation,
              object.startLocation,
              object.endLocation,
              object.telemetry
            ],
        toManyRelations: (Trip object) => {},
        getId: (Trip object) => object.id,
        setId: (Trip object, int id) {
          object.id = id;
        },
        objectToFB: (Trip object, fb.Builder fbb) {
          final tripCategoryOffset = fbb.writeString(object.tripCategory);
          final tripStatusOffset = fbb.writeString(object.tripStatus);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.tripInformation.targetId);
          fbb.addInt64(2, object.startLocation.targetId);
          fbb.addInt64(3, object.endLocation.targetId);
          fbb.addFloat64(4, object.startMileage);
          fbb.addFloat64(5, object.endMileage);
          fbb.addInt64(6, object.telemetry.targetId);
          fbb.addOffset(7, tripCategoryOffset);
          fbb.addOffset(8, tripStatusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startLocationParam = obx.ToOne<Location>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final telemetryParam = obx.ToOne<Telemetry>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final tripStatusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final startMileageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final tripCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final object = Trip(
              startLocation: startLocationParam,
              telemetry: telemetryParam,
              tripStatus: tripStatusParam,
              startMileage: startMileageParam,
              tripCategory: tripCategoryParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..endMileage = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 14);
          object.tripInformation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.tripInformation.attach(store);
          object.startLocation.attach(store);
          object.endLocation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.endLocation.attach(store);
          object.telemetry.attach(store);
          return object;
        }),
    TripInformation: obx_int.EntityDefinition<TripInformation>(
        model: _entities[5],
        toOneRelations: (TripInformation object) => [],
        toManyRelations: (TripInformation object) => {},
        getId: (TripInformation object) => object.id,
        setId: (TripInformation object, int id) {
          object.id = id;
        },
        objectToFB: (TripInformation object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TripInformation()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    VehicleDiagnostics: obx_int.EntityDefinition<VehicleDiagnostics>(
        model: _entities[6],
        toOneRelations: (VehicleDiagnostics object) => [],
        toManyRelations: (VehicleDiagnostics object) => {},
        getId: (VehicleDiagnostics object) => object.id,
        setId: (VehicleDiagnostics object, int id) {
          object.id = id;
        },
        objectToFB: (VehicleDiagnostics object, fb.Builder fbb) {
          final vinOffset = fbb.writeString(object.vin);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, vinOffset);
          fbb.addFloat64(2, object.currentMileage);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final vinParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final currentMileageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = VehicleDiagnostics(
              vin: vinParam, currentMileage: currentMileageParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Driver] entity fields to define ObjectBox queries.
class Driver_ {
  /// See [Driver.id].
  static final id =
      obx.QueryIntegerProperty<Driver>(_entities[0].properties[0]);

  /// See [Driver.isAuthorized].
  static final isAuthorized =
      obx.QueryBooleanProperty<Driver>(_entities[0].properties[1]);

  /// See [Driver.privateTrips].
  static final privateTrips =
      obx.QueryBooleanProperty<Driver>(_entities[0].properties[2]);

  /// see [Driver.trips]
  static final trips =
      obx.QueryRelationToMany<Driver, Trip>(_entities[0].relations[0]);
}

/// [Gps] entity fields to define ObjectBox queries.
class Gps_ {
  /// See [Gps.id].
  static final id = obx.QueryIntegerProperty<Gps>(_entities[1].properties[0]);
}

/// [Location] entity fields to define ObjectBox queries.
class Location_ {
  /// See [Location.id].
  static final id =
      obx.QueryIntegerProperty<Location>(_entities[2].properties[0]);

  /// See [Location.street].
  static final street =
      obx.QueryStringProperty<Location>(_entities[2].properties[1]);

  /// See [Location.city].
  static final city =
      obx.QueryStringProperty<Location>(_entities[2].properties[2]);

  /// See [Location.postalCode].
  static final postalCode =
      obx.QueryStringProperty<Location>(_entities[2].properties[3]);
}

/// [Telemetry] entity fields to define ObjectBox queries.
class Telemetry_ {
  /// See [Telemetry.id].
  static final id =
      obx.QueryIntegerProperty<Telemetry>(_entities[3].properties[0]);

  /// See [Telemetry.gps].
  static final gps =
      obx.QueryRelationToOne<Telemetry, Gps>(_entities[3].properties[1]);

  /// See [Telemetry.vehicleDiagnostics].
  static final vehicleDiagnostics =
      obx.QueryRelationToOne<Telemetry, VehicleDiagnostics>(
          _entities[3].properties[2]);
}

/// [Trip] entity fields to define ObjectBox queries.
class Trip_ {
  /// See [Trip.id].
  static final id = obx.QueryIntegerProperty<Trip>(_entities[4].properties[0]);

  /// See [Trip.tripInformation].
  static final tripInformation =
      obx.QueryRelationToOne<Trip, TripInformation>(_entities[4].properties[1]);

  /// See [Trip.startLocation].
  static final startLocation =
      obx.QueryRelationToOne<Trip, Location>(_entities[4].properties[2]);

  /// See [Trip.endLocation].
  static final endLocation =
      obx.QueryRelationToOne<Trip, Location>(_entities[4].properties[3]);

  /// See [Trip.startMileage].
  static final startMileage =
      obx.QueryDoubleProperty<Trip>(_entities[4].properties[4]);

  /// See [Trip.endMileage].
  static final endMileage =
      obx.QueryDoubleProperty<Trip>(_entities[4].properties[5]);

  /// See [Trip.telemetry].
  static final telemetry =
      obx.QueryRelationToOne<Trip, Telemetry>(_entities[4].properties[6]);

  /// See [Trip.tripCategory].
  static final tripCategory =
      obx.QueryStringProperty<Trip>(_entities[4].properties[7]);

  /// See [Trip.tripStatus].
  static final tripStatus =
      obx.QueryStringProperty<Trip>(_entities[4].properties[8]);
}

/// [TripInformation] entity fields to define ObjectBox queries.
class TripInformation_ {
  /// See [TripInformation.id].
  static final id =
      obx.QueryIntegerProperty<TripInformation>(_entities[5].properties[0]);
}

/// [VehicleDiagnostics] entity fields to define ObjectBox queries.
class VehicleDiagnostics_ {
  /// See [VehicleDiagnostics.id].
  static final id =
      obx.QueryIntegerProperty<VehicleDiagnostics>(_entities[6].properties[0]);

  /// See [VehicleDiagnostics.vin].
  static final vin =
      obx.QueryStringProperty<VehicleDiagnostics>(_entities[6].properties[1]);

  /// See [VehicleDiagnostics.currentMileage].
  static final currentMileage =
      obx.QueryDoubleProperty<VehicleDiagnostics>(_entities[6].properties[2]);
}
